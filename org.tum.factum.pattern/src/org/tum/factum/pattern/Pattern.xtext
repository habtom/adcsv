grammar org.tum.factum.pattern.Pattern with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate pattern "http://www.tum.org/factum/pattern/Pattern"
Pattern returns Pattern:
	{Pattern}
	'Pattern' name=ID 'ShortName' psname=ID
	'{'
		//Language Part 1 - Specification of Data Types
		('DTSpec' '{' dtSpec+=DataTypeSpec( "," dtSpec+=DataTypeSpec)* '}' )?
		
		//Language Part 2 - Specification of Component Types (CTypes)
		('CTypes' '{' componentTypes+=ComponentType	( "," componentTypes+=ComponentType)* '}'
		)?
		
 		//Language Part 3 - Specification of Architectural Constraints
	    ('ArchSpec' '{'
	    	(ctaCmpVar+=ComponentVariable ("," ctaCmpVar+=ComponentVariable)*) 		//Declaration of Component Variables
	    	(ctaDtVars=DTVariables)?												//Declaration of DT Variables

			//(actFormulaIds+=ActivationFormulasID)*

			(ctaFormulaIds+=CtaFormulasID)*
	    	'}'
	    )?
	    //Part 4 - Specification of Architectural Guarantees
	    ('ArchGuarantee' '{'
			(agCmpVar+=ComponentVariable ("," agCmpVar+=ComponentVariable)*)
			(agDtVars=DTVariables)?
			
			(agFormulaIds+=AgFormulasID)*
	    '}')?
	    
		('SubPattern' '{' SubPattern+=Pattern ( "," SubPattern+=Pattern)* '}' )?
	'}'
;
ComponentType returns ComponentType:
	{ComponentType} 
	'CType'	name=ID ('ShortName' ctsname=ID)?
	//Optional package declaration needed for JavaMOP
	('Package' packageName=QualifiedName)?
	'{'
	    //Part 2.1 of Spec
	    ('InputPorts' '{' 
	    	inputPorts+=InputPort ( "," inputPorts+=InputPort)* 
	    	'}'
	    )?
	    //Part 2.2 of Spec
	    ('OutputPorts' '{' 
	    	outputPorts+=OutputPort ( "," outputPorts+=OutputPort)* 
	    	'}'
	    )?
	    //Part 2.3 of Spec
	    ('Parameters' '{' 
	    	parameters+=Parameter ( "," parameters+=Parameter)* 
	    	'}'
	    )?
	    //Part 2.4 of Spec
	    ('BTA' '{' //Behavior Trace Assertions (BTA)
	    	(btaDtVar+=DataTypeVariable ("," btaDtVar+=DataTypeVariable)*)?
			(btaFormulaIds+=BtaFormulasID)*
			'}'
	    )?
	'}'
;
Parameter returns Parameter:
	{Parameter}
	'Parameter' name=ID '(' 
		('Type' ':' paramSrtTyp=[Sort|QualifiedName])? 
	')'
;
OutputPort returns OutputPort:
	{OutputPort} 
	'OutputPort' name=EString '(' 
		('Type' ':' outputPrtSrtTyp=[Sort|QualifiedName])? 
		('connects' connects+=[InputPort|QualifiedName]*)? 
	')'
;
InputPort returns InputPort:
	{InputPort}	
	'InputPort' name=ID '('
		('Type' ':' inputPrtSrtTyp=[Sort|QualifiedName])?
	    ('connects' connects+=[OutputPort|QualifiedName]*)?
	')'
;
DataTypeSpec returns DataTypeSpec:
	{DataTypeSpec}	
	'DT' name =ID
		//Optional package declaration needed for JavaMOP
		('Package' packageName=QualifiedName)? '('
		('Param' (dtParam+=Sort ("," dtParam+=Sort)*))?
		('Sort' (dtSorts+=Sort ("," dtSorts+=Sort)*))?
		('Operation' (dtOps+=Operation ("," dtOps+=Operation)*))?
		('Predicate' (dtPredicate+=DTPredicate ("," dtPredicate+=DTPredicate)*))?
		(sortName=[Sort|ID] 'generatedBy' (returnOps+=[Operation|ID] ("," returnOps+=[Operation|ID])*))?
	    ('DTA' '{' //Datatype Assertions (DTA)
	    	(dtaDtVar+=DataTypeVariable ("," dtaDtVar+=DataTypeVariable)*)?
			(dtaFormulaIds+=DtaFormulasID)*
			'}'
	    )?		
	')'
;
DTPredicate:
	name=ID ':' (pInput+=[Sort|QualifiedName] ("," pInput+=[Sort|QualifiedName])*)?
;
Operation:
	name=ID ':'  (dtInput+=[Sort|QualifiedName] ("," dtInput+=[Sort|QualifiedName])*)? '=>' (dtOutput=[Sort|QualifiedName])?
;
Sort:
	name=ID
;
//Begin common rules for CTA, Architectural Guarantee(AG) and Behavior Trace Assertions (BTA)
VariableStatus: 
	'rig' | 'flex'
;
ComponentVariable:
	//cmptypAssigned => Component Type assigned or associated to the component variable
	VariableStatus	name=ID ':' cmptypAssigned=[ComponentType|ID]?
;
DataTypeVariable:
	VariableStatus name=ID ':' varSortType=[Sort|QualifiedName]
;
DTVariables:
	(dtVars+=DataTypeVariable ("," dtVars+=DataTypeVariable)*)
;
PortRef:
	InputPort | OutputPort | Parameter
;
CmpVariableRef:
	cmpRef=[ComponentVariable|ID] '.' portRef=[PortRef|ID]
;
Term:
	cmpVariableRef=CmpVariableRef |
	dtTypeVars=[DataTypeVariable|ID] | 
	termOperatorFunction=TermOperatorFunction
;
TermOperatorFunction:
	trmOperator=[Operation|QualifiedName] "(" (trmOperands+=Term ("," trmOperands+=Term)*) ")" 
;
//RefComponentVariableParameter:
//	parameterCmpRef=[ComponentVariable|ID] '.' parameterRef=[Parameter|ID]
//;
RefComponentVariableInputPort:
	inptPrtCmpRef=[ComponentVariable|ID] '.' inputPrtrf=[InputPort|ID]
;
RefComponentVariableOutputPort:
	outptPrtCmpRef=[ComponentVariable|ID] '.' outputPrtrf=[OutputPort|ID]
;
//End

//Begin Configuration Trace Assertions(CTA) - Architectural Configuration or Configuration Trace Assertion 
//BeginBaseTerms
CtaPredicateTerms:
	ctaPTerm1=Term equalityOperator=EqualityElementOperator ctaPTerm2=Term
;
CtaPredicateConn: 
	ctaConn='conn' ('(' ctaConnCmpVarOutputPort=RefComponentVariableOutputPort ','	ctaConnCmpVarInptPort=RefComponentVariableInputPort ')')
; 
CtaPredicateEq: 
	ctaEq='eq' ('(' ctaComponentVariable1=[ComponentVariable|ID] ',' ctaComponentVariable2=[ComponentVariable|ID] ')')
;
CtaPredicateVal:
	ctaVal='val' ('(' valCmpVariableRef=CmpVariableRef ',' ctaValTerms=Term ')') 
;
CtaPredicateCAct:
	cAct='cAct' ('('cActCmpVar=[ComponentVariable|ID] ')')
;
CtaPredicatePAct:
	pAct='pAct' ('(' pActCtaCmpVaref=CmpVariableRef ')') 
;
//EndBaseTerms

//BeginCtaFormulaExpression
CtaFormula returns CtaFormula:
	ctaUnaryFormulas=CtaUnaryFormulas | 
	ctaBinaryFormulas=CtaBinaryFormulas |
	ctaQuantifiedFormulas=CtaQuantifiedFormulas
;
CtaUnaryFormulas returns CtaFormula:
	{CtaUnaryFormulas} (unaryOperator=UnaryOperator ctaFormulaLtl=CtaFormula)
;

CtaQuantifiedFormulas:
 	{CtaQuantifiedFormulas} (quantifierOperator=QuantifierOperator ctaQuantifiedFs=CtaFormula)
;
CtaBinaryFormulas returns CtaFormula:
	{CtaBinaryFormulas}	
	ctaPrimary=CtaPrimary (
		{CtaBinaryFormulas.left=current} binaryOperator=BinaryOperator right=CtaPrimary 
		)*
;
CtaPrimary returns CtaFormula:
	(ctaFormulaWithBracket=CtaFormulaWithBracket | ctaBaseTerms=CtaBaseTerms)
;
CtaFormulaWithBracket:
	leftBracket='(' ctaPrimaryFormula=CtaFormula rightBracket=')'
;
CtaBaseTerms:
		ctaPredicateTerms=CtaPredicateTerms | 
		ctaPredicateConn=CtaPredicateConn | 
		ctaPredicateVal=CtaPredicateVal | 
		ctaPredicateEq=CtaPredicateEq | //This might be duplicate to CtaPredicateTerms?
		ctaPredicateCAct=CtaPredicateCAct | 
		ctaPredicatePAct=CtaPredicatePAct 
;
//EndCtaFormulaExpression

CtaFormulasID:
	name=ID ':' ctaFormula=CtaFormula
;
// End CTA

// Begin Architectural Guarantee
//BeginBaseTerms
AgPredicateTerms:
	agPTerm1=Term equalityOperator=EqualityElementOperator agPTerm2=Term
;
AgPredicateConn: 
	agConn='conn' ('(' agConnCmpVarOutputPort=RefComponentVariableOutputPort ',' agConnCmpVarInptPort=RefComponentVariableInputPort ')')
; 
AgPredicateEq: 
	agEq='eq' ('(' agComponentVariable1=[ComponentVariable|ID] ',' agComponentVariable2=[ComponentVariable|ID] ')')
;
AgPredicateVal:
	agVal='val' ('(' valCmpVariableRef=CmpVariableRef ',' agValTerms=Term ')') 
;
AgPredicateCAct:
	cAct='cAct' ('('cActCmpVar=[ComponentVariable|ID] ')')
;
AgPredicatePAct:
	pAct='pAct' ('(' pActAgCmpVaref=CmpVariableRef ')') 
;
//EndBaseTerms

//BeginAgFormulaExpression
AgFormula returns AgFormula:
	agUnaryFormulas=AgUnaryFormulas | 
	agBinaryFormulas=AgBinaryFormulas |
	agQuantifiedFormulas=AgQuantifiedFormulas
;
AgUnaryFormulas returns AgFormula:
	{AgUnaryFormulas} (unaryOperator=UnaryOperator agFormulaLtl=AgFormula)
;
AgQuantifiedFormulas:
 	{AgQuantifiedFormulas} (quantifierOperator=QuantifierOperator agQuantifiedFs=AgFormula)
;
AgBinaryFormulas returns AgFormula:
	{AgBinaryFormulas}	
	agPrimary=AgPrimary (
		{AgBinaryFormulas.left=current} binaryOperator=BinaryOperator right=AgPrimary 
		)*
;
AgPrimary returns AgFormula:
	(agFormulaWithBracket=AgFormulaWithBracket | agBaseTerms=AgBaseTerms)
;
AgFormulaWithBracket:
	leftBracket='(' agPrimaryFormula=AgFormula rightBracket=')'
;
AgBaseTerms:
		agPredicateTerms=AgPredicateTerms | 
		agPredicateConn=AgPredicateConn | 
		agPredicateVal=AgPredicateVal | 
		agPredicateEq=AgPredicateEq |
		agPredicateCAct=AgPredicateCAct | 
		agPredicatePAct=AgPredicatePAct 
;
//EndAgFormulaExpression
AgFormulasID:
	name=ID ':' agFormula=AgFormula
;
// End AG

// Begin Datatype Assertion 
DtaTerms:
	DataTypeVariable	
;
DtaTermPredicateFunction:
	dtaPredOperator=[DTPredicate|QualifiedName] "(" (dtaTrmOperands+=DtaTerm ("," dtaTrmOperands+=DtaTerm)*) ")" 
;
DtaTermOperatorFunction:
	dtaTrmOperator=[Operation|QualifiedName] "(" (dtaTrmOperands+=DtaTerm ("," dtaTrmOperands+=DtaTerm)*) ")" 
;
DtaTerm:
	dtaTerms=[DtaTerms|ID] | dtaTrmOperatorFunction=DtaTermOperatorFunction
;
DtaPredicate1:
	(dtaTerm1=DtaTerm EqualityElementOperator dtaTerm2=DtaTerm)
;
DtaPredicate:
	(DtaPredicate1) | (dtaPred=DtaTermPredicateFunction)
;
DtaUrinaryFormulas:
	UnaryOperator  dtaFormulaLtl=DtaFormula
;
DtaQuantifiedFormulas:
	QuantifierOperator dtaQuantifiedFs=DtaFormula 
;
DtaFormula:
	DtaPredicate// | 
	//DtaUrinaryFormulas | 
	//BtaBinaryFormulas |  
	//DtaQuantifiedFormulas
;
DtaFormulasID:
	name=ID ':' dtaFormula=DtaFormula
;
//End DTA

// Begin Behavior Trace Assertions(BTA) 
BtaTerms:
	prtRef=PortRef | DataTypeVariable	
;
BtaTermOperatorFunction:
	btaTrmOperator=[Operation|QualifiedName] "(" (btaTrmOperands+=BtaTerm ("," btaTrmOperands+=BtaTerm)*) ")"
;
BtaTerm:
	btaTerms=[BtaTerms|ID] | btaTrmOperatorFunction=BtaTermOperatorFunction
;
BtaPredicate:
	(btaTerm1=BtaTerm EqualityElementOperator btaTerm2=BtaTerm) 
;
BtUrinaryFormulas:
	UnaryOperator  btaFormulaLtl=BtaFormula
;
BtaQuantifiedFormulas:
	QuantifierOperator btaQuantifiedFs=BtaFormula 
;
BtaFormula:
	BtaPredicate | 
	BtUrinaryFormulas | 
	//BtaBinaryFormulas |  
	BtaQuantifiedFormulas
;
BtaFormulasID:
	name=ID ':' btaFormula=BtaFormula
;
//End BTA 

//Begin Operator rules for CTA, BTA, and AG ....
UnaryOperator: 
	ltlG='G' | ltlX='X' |	ltlF='F' | //Linear Temporal Logic Operators
	neg='Â¬' // Negation logic operator
;

BinaryOperator: //operates F and F, F is a formula (CtaFormula,  AgFormula, and BtaFormula)

	lAnd='â§' | 
	lDisjunct='â¨' |
	lImplies='â' | lDoubleImplies='â' |
	lWeakUntil='W' | lUntil='U' 

;
/*
BinaryOperatorOr: //operates F and F, F is a formula (CtaFormula,  AgFormula, and BtaFormula)
	lDisjunct='â¨'
;
BinaryOperatorAnd:
	lAnd='â§'
;
BinaryOperatorImplies:
	lImplies='â' | lDoubleImplies='â'
;
BinaryOperatorUntil:
	lWeakUntil='W' | lUntil='U'
;
*/
EqualityElementOperator:
	'='
;

QuantifierOperator:
	exists='â'quantifiedExistsVar=[ComponentVariable|ID]'.' | all='â'quantifiedAllVar=[ComponentVariable|ID]'.'
;
//End
QualifiedName:
    ID ('.' ID)*
;
EString returns ecore::EString:
	STRING | ID
;