/*
 * generated by Xtext 2.12.0
 */
package org.tum.factum.pattern.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.tum.factum.pattern.pattern.ComponentType
import org.tum.factum.pattern.pattern.InputPort
import org.tum.factum.pattern.pattern.OutputPort
import org.tum.factum.pattern.pattern.Pattern
import org.tum.factum.pattern.services.PatternGrammarAccess

class PatternFormatter extends AbstractFormatter2 {
	
	@Inject extension PatternGrammarAccess

	def dispatch void format(Pattern pattern, extension IFormattableDocument document) {
		//pattern.regionFor.keyword("{").append[newLine]
		//pattern.regionFor.keyword("}").prepend[newLine]
		//pattern.regionFor.keyword(",").append[newLine]	
			
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		for (Interface _interface : pattern.getPatternConnections()) {
//			_interface.format;
//		}
		for (ComponentType ComponentType : pattern.getComponentTypes()) {
			ComponentType.format;
		}
//		for (Interface _interface : pattern.getHasInterfaces()) {
//			_interface.format;
//		}
		//for (InputPort inputPort : pattern.getContainsInPorts()) {
			//inputPort.format;
		//}
		//for (OutputPort outputPort : pattern.getContainsOutPorts()) {
			//outputPort.format;
		//}
		for (Pattern _pattern : pattern.getSubPattern()) {
			_pattern.format;
		}
	}

	def dispatch void format(ComponentType ComponentType, extension IFormattableDocument document) {
		//component.regionFor.keyword("{").append[newLine]
		//component.regionFor.keyword("}").prepend[newLine]
		//component.regionFor.keyword(",").append[newLine]
		//component.regionFor.keyword(",").prepend[newLine]
		
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		for (Interface _interface : ComponentType.getHasEdges()) {
//			_interface.format;
//		}
		//uncomment this for sirius
		for (InputPort inputPort : ComponentType.getInputPorts()) {
			inputPort.format;
		}
		for (OutputPort outputPort : ComponentType.getOutputPorts()) {
			outputPort.format;
		}
	
		/*
		for (InputPort inputPort : component.getContainsInPorts()) {
			inputPort.format;
		}
		for (OutputPort outputPort : component.getContainsOutPorts()) {
			outputPort.format;
		}
		*/
	
	}
	

	
	// TODO: implement for Interface
}
