Pattern TrainguardMT ShortName tgmt {
	DTSpec {
		DT Status (
			Sort INT
		),
		DT Int (			
			Sort INT
			Operation add: INT, INT => INT,
					sub: INT, INT => INT
		),
		DT DoorStatus (
			Sort DoorStatus
			Predicate DT_DoorStatus_DoorsVitalClosed: DoorStatus,
					DT_DoorStatus_Closed: DoorStatus
		),
		DT Bool ( 
			Sort BOOLEAN
			Predicate true: BOOLEAN,
					false: BOOLEAN
		),
		DT Comparison (
			Operation ls: Int.INT, Int.INT => Bool.BOOLEAN,
					gt: Int.INT, Int.INT => Bool.BOOLEAN
		),
		DT Command (
			Sort STRING
		),
		DT DoorReleaseCommand (
			Sort DoorReleaseCommand
			Predicate DT_DoorReleaseCommand_Right: DoorReleaseCommand,
					DT_DoorReleaseCommand_Left: DoorReleaseCommand,
					DT_DoorReleaseCommand_Both: DoorReleaseCommand,
					DT_DoorReleaseCommand_Deactivate: DoorReleaseCommand
		),
		DT DoorOpenStrategy (
			Sort DoorOpenStrategy
			Predicate DT_DoorOpenStrategy_Right: DoorOpenStrategy,
					DT_DoorOpenStrategy_Left: DoorOpenStrategy
		),
		DT DoorReleaseStatus (
			Sort DoorReleaseStatus
			Predicate DT_DoorReleaseStatus_Released: DoorReleaseStatus,
					DT_DoorReleaseStatus_Locked: DoorReleaseStatus
		),
		DT MovingStatus (
			Sort MovingStatus
			Predicate DT_TrainMovingStatus_Moving: MovingStatus,
					DT_TrainMovingStatus_StandStill: MovingStatus
		),
		DT DoorCommand (
			Sort DoorCommand
			Predicate DT_DoorCommand_Open: DoorCommand,
					DT_DoorCommand_Close: DoorCommand
		),
		DT TrainControlLevel (
			Sort TrainControlLevel
			Predicate DT_TrainControlLevel_CTC: TrainControlLevel,
					DT_TrainControlLevel_ITC: TrainControlLevel
		),
		DT PSD_Authorization (
			Sort PSD_Authorization
			Predicate DT_PSD_Authorization_Authorize: PSD_Authorization,
		          DT_PSD_Authorization_Not_Authorize: PSD_Authorization
		),
		DT PlatformPSDStatus (
			Sort PlatformPSDStatus
			Predicate DT_PlatformPSDStatus_Has_PSD: PlatformPSDStatus
		),
		DT Authority (
			Sort STRING
		)
	}
	CTypes {
		/*
		 * OBCU ATO Components
		 */
		CType OBCU_ATO_In_Converter {
			InputPorts {
				InputPort AB_I_Door_Operating_Mode (Type: DoorStatus.DoorStatus),
				InputPort AB_I_Premissive_Door_Button (Type: Bool.BOOLEAN),
				InputPort CAB_I_Door_Command (Type: DoorCommand.DoorCommand),
				InputPort CL_I_Door_Closed_Indication (Type: DoorStatus.DoorStatus)
			}
			OutputPorts {
				OutputPort doorStatus (Type: DoorStatus.DoorStatus),
				OutputPort cabDoorCommand (Type: DoorCommand.DoorCommand),
				OutputPort cabPremissiveDoorButton (Type: Bool.BOOLEAN),
				OutputPort cabPremissiveDoorMode (Type: Status.INT)
			}
		},
		CType OBCU_ATO_Door_Mode_Controller {
			InputPorts {
				InputPort trainOperationMode (Type: Status.INT),
				InputPort platformPSDStatus (Type: DoorStatus.DoorStatus),
				InputPort trainControlLevel(Type: TrainControlLevel.TrainControlLevel),
				InputPort cabPremissiveDoorButton (Type: Bool.BOOLEAN),
				InputPort cabPremissiveDoorMode (Type: Status.INT)
			}
			OutputPorts {
				OutputPort doorMode (Type: Status.INT)
			}
		},
		CType OBCU_ATO_Door_Open_Controller {
			InputPorts {
				InputPort doorMode (Type: Status.INT),
				InputPort dwellTimeElapsed (Type: Bool.BOOLEAN),
				InputPort releaseForcedByPermissiveDoorButton (Type: Bool.BOOLEAN),
				InputPort doorReleaseStatus (Type: DoorReleaseStatus.DoorReleaseStatus),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel)
			}
			OutputPorts {
				OutputPort doorOpenCommand (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract doorsOpened {
					triggers {
						doorReleased: DoorReleaseStatus.DT_DoorReleaseStatus_Released[doorReleaseStatus]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Open[doorOpenCommand]
					duration 1
				},
				Contract doorsClosed {
					triggers {
						doorReleased: DoorReleaseStatus.DT_DoorReleaseStatus_Locked[doorReleaseStatus]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Close[doorOpenCommand]
					duration 1
				}
			}
		},
		CType OBCU_ATO_Train_Door_Supervision_Mode_Controller {
			InputPorts {
				InputPort movingStatus (Type: MovingStatus.MovingStatus),
				InputPort doorReleaseStatus (Type: DoorReleaseStatus.DoorReleaseStatus),
				InputPort cabPremissiveDoorButton (Type: Bool.BOOLEAN),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort doorStatus (Type: DoorStatus.DoorStatus)
			}
			OutputPorts {
				OutputPort trainSupervision (Type: Bool.BOOLEAN)
			}
		},
		CType OBCU_ATO_Train_Door_Supervision_Controller {
			InputPorts {
				InputPort trainSupervision (Type: Bool.BOOLEAN),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort doorStatus (Type: DoorStatus.DoorStatus)
			}
			OutputPorts {
				OutputPort trainMovement (Type: Bool.BOOLEAN)
			}
		},
		CType OBCU_ATO_PSD_Door_Controller {
			InputPorts {
				InputPort openDoorCommand (Type: DoorCommand.DoorCommand),
				InputPort cabDoorCommand (Type: DoorCommand.DoorCommand),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel)
			}
			OutputPorts {
				OutputPort psdDoorCommand (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract forwardClosedDoorCommand {
					triggers {
						closedCommand: DoorCommand.DT_DoorCommand_Close[openDoorCommand],
						controlLevelCTC: TrainControlLevel.DT_TrainControlLevel_CTC[trainControlLevel] at 1
					}
					guarantee
						DoorCommand.DT_DoorCommand_Close[psdDoorCommand]
					duration 2
				},
				Contract forwardOpemDoorCommand {
					triggers {
						openCommand: DoorCommand.DT_DoorCommand_Open[openDoorCommand]
					}
					guarantee
						DoorCommand.DT_DoorCommand_Open[psdDoorCommand]
					duration 1
				}
			}
		},
		CType OBCU_ATO_PSD_Door_Command_State {
			InputPorts {
				InputPort openDoorCommand (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort psdDoorCommandState (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract forwardingCloseCommand {
					triggers { 
						doorClosed: DoorCommand.DT_DoorCommand_Close[openDoorCommand]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Close[psdDoorCommandState]
					duration 1
				},
				Contract forwardingOpenCommand {
					triggers { 
						openCommand: DoorCommand.DT_DoorCommand_Open[openDoorCommand]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Open[psdDoorCommandState]
					duration 1
				}
			}
		},
		CType OBCU_ATO_Telegram_Builder {
			InputPorts {
				InputPort psdDoorCommandState (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort OBCU_WCU_PlatformDoor (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract forwardingCloseCommand {
					triggers { 
						doorClosed: DoorCommand.DT_DoorCommand_Close[psdDoorCommandState]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Close[OBCU_WCU_PlatformDoor]
					duration 1
				},
				Contract forwardingOpenCommand {
					triggers { 
						openCommand: DoorCommand.DT_DoorCommand_Open[psdDoorCommandState]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Open[OBCU_WCU_PlatformDoor]
					duration 1
				}
			}
		},
		CType OBCU_ATO_Out_Converter {
			InputPorts {
				InputPort openDoorCommand (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort TCL_O_Door_Opening_Closing (Type: DoorCommand.DoorCommand)
			}
		},


		/*
		 * OBCU ITF Components
		 */

		CType OBCU_ITF_WWA_Telegram_Extractor {
			InputPorts {
				InputPort WCU_OBCU_MovementAuthority (Type: Authority.STRING)
			}
			OutputPorts {
				OutputPort rauz (Type: Status.INT)
			}
		},
		CType OBCU_ITF_Out_Convertor {
			InputPorts {
				InputPort doorStatusHMI (Type: Status.INT),
				InputPort psdStatusHMI (Type: Status.INT),
				InputPort currentDoorModeHMI (Type: Status.INT),
				InputPort doorReleaseStatusHMI (Type: Status.INT)
			}
			OutputPorts {
				OutputPort HMI_O_Train_Door_Release (Type: Status.INT),
				OutputPort HMI_O_Train_Door_Mode (Type: Status.INT),
				OutputPort HMI_O_PSD (Type: Status.INT),
				OutputPort HMI_O_Train_Door_Status (Type: Status.INT)
			}
		},
		CType OBCU_ITF_HMI_Status_Function {
			InputPorts {
				InputPort rauz (Type: Status.INT),
				InputPort doorReleaseStatus (Type: DoorReleaseStatus.DoorReleaseStatus),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort doorMode (Type: Status.INT),
				InputPort doorStatus (Type: DoorStatus.DoorStatus)
			}
			OutputPorts {
				OutputPort doorStatusHMI (Type: DoorStatus.DoorStatus),
				OutputPort psdStatusHMI (Type: Status.INT),
				OutputPort currentDoorModeHMI (Type: Status.INT),
				OutputPort doorReleaseStatusHMI (Type: DoorReleaseStatus.DoorReleaseStatus)
			}
		},
		CType OBCU_ITF_FWD_Movement_Authority {
			InputPorts {
				InputPort WCU_OBCU_MovementAuthority (Type: Authority.STRING)
			}
			OutputPorts {
				OutputPort WCU_OBCU_MovementAuthority_Out (Type: Authority.STRING)
			}
		},
		CType OBCU_ITF_FWD_Position_Report {
			InputPorts {
				InputPort WCU_OBCU_PositionReport (Type: PSD_Authorization.PSD_Authorization)
			}
			OutputPorts {
				OutputPort WCU_OBCU_PositionReport_Out (Type: PSD_Authorization.PSD_Authorization)
			}
			Contracts {
				Contract forwardNotAuthorized {
					triggers {
						notAuthorized: PSD_Authorization.DT_PSD_Authorization_Not_Authorize[WCU_OBCU_PositionReport]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[WCU_OBCU_PositionReport_Out]
					duration 1
				},
				Contract forwardAuthorized {
					triggers {
						authorized: PSD_Authorization.DT_PSD_Authorization_Authorize[WCU_OBCU_PositionReport]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Authorize[WCU_OBCU_PositionReport_Out]
					duration 1
				}
			}
		},
		CType OBCU_ITF_FWD_Platform_Door {
			InputPorts {
				InputPort WCU_OBCU_PlatformDoor (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort WCU_OBCU_PlatformDoor_Out (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract forwardingCloseCommand {
					triggers {
						doorsClosed: DoorCommand.DT_DoorCommand_Close[WCU_OBCU_PlatformDoor]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Close[WCU_OBCU_PlatformDoor_Out]
					duration 1
				},
				Contract forwardingOpenCommand {
					triggers {
						openCommand: DoorCommand.DT_DoorCommand_Open[WCU_OBCU_PlatformDoor]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Open[WCU_OBCU_PlatformDoor_Out]
					duration 1
				}
			}
		},

		/*
		 * OBCU ATP Components
		 */
		CType OBCU_ATP_In_Converter {
			InputPorts {
				InputPort TCL_I_Door_Closed_Indication (Type: DoorStatus.DoorStatus),
				InputPort TCL_I_Door_Closed_Button (Type: Bool.BOOLEAN)
			}
			OutputPorts {
				OutputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				OutputPort cabPremissiveDoorButton (Type: Bool.BOOLEAN),
				OutputPort doorStatus (Type: DoorStatus.DoorStatus)
			}
			Contracts {
				Contract forwardDoorClosedIndication {
					triggers {
						closedIndication: DoorStatus.DT_DoorStatus_DoorsVitalClosed[TCL_I_Door_Closed_Indication]
					}
					guarantee 
						DoorStatus.DT_DoorStatus_Closed[doorStatus]
					duration 1
				}
			}
		},
		CType OBCU_ATP_Out_Converter {
			InputPorts {
				InputPort propulsion (Type: Bool.BOOLEAN),
				InputPort doorReleaseCommand (Type: DoorReleaseCommand.DoorReleaseCommand)
			}
			OutputPorts {
				OutputPort TCL_O_Propulsion_Release (Type: Bool.BOOLEAN),
				OutputPort TCL_O_Door_Release (Type: Bool.BOOLEAN)
			}
			Contracts {
				Contract doorsReleased {
					triggers {
						doorsReleased: DoorReleaseCommand.DT_DoorReleaseCommand_Left[doorReleaseCommand]
										\/ DoorReleaseCommand.DT_DoorReleaseCommand_Right[doorReleaseCommand]
										\/ DoorReleaseCommand.DT_DoorReleaseCommand_Both[doorReleaseCommand]
					}
					guarantee 
						Bool.true[TCL_O_Door_Release]
					duration 1
				}
			}
		},
		CType OBCU_ATP_WMA_Telegram_Extractor{
			InputPorts {
				InputPort WCU_OBCU_MovementAuthority_out (Type: Authority.STRING)
			}
			OutputPorts {
				OutputPort rauz (Type: Status.INT)
			}
		},
		CType OBCU_ATP_PSD_Authorization_State_Tracker {
			InputPorts {
				InputPort authorizePSDOpening (Type: PSD_Authorization.PSD_Authorization)
			}
			OutputPorts {
				OutputPort psdAuthorizationState (Type: PSD_Authorization.PSD_Authorization)
			}
			Contracts {
				Contract forwardNotAuthorized {
					triggers {
						notAuthorized: PSD_Authorization.DT_PSD_Authorization_Not_Authorize[authorizePSDOpening]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[psdAuthorizationState]
					duration 1
				},
				Contract forwardAuthorized {
					triggers {
						authorized: PSD_Authorization.DT_PSD_Authorization_Authorize[authorizePSDOpening]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Authorize[psdAuthorizationState]
					duration 1
				}
			}
		},
		CType OBCU_ATP_PSD_Authorization_Controller {
			InputPorts {
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort doorReleaseStatus (Type: DoorReleaseStatus.DoorReleaseStatus),
				InputPort doorReleaseCommand (Type: DoorReleaseCommand.DoorReleaseCommand)
			}
			OutputPorts {
				OutputPort authorizePSDOpening (Type: PSD_Authorization.PSD_Authorization)
			}
			Contracts {
				Contract notAuthorized {
					triggers {
//						trainControlLevelCTC: TrainControlLevel.DT_TrainControlLevel_CTC[trainControlLevel],
						doorReleaseStatusLocked: DoorReleaseStatus.DT_DoorReleaseStatus_Locked[doorReleaseStatus] /\ DoorReleaseCommand.DT_DoorReleaseCommand_Deactivate[doorReleaseCommand]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[authorizePSDOpening]
					duration 1
				},
				Contract authorized {
					triggers {
						doorReleaseStatusReleased: DoorReleaseStatus.DT_DoorReleaseStatus_Released[doorReleaseStatus]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Authorize[authorizePSDOpening]
					duration 1
				}
			}
		},
		CType OBCU_ATP_Telegram_Builder {
			InputPorts {
				InputPort psdAuthorizationState (Type: PSD_Authorization.PSD_Authorization)
			}
			OutputPorts {
				OutputPort OBCU_WCU_PositionReport (Type: PSD_Authorization.PSD_Authorization)
			}
			Contracts {
				Contract forwardNotAuthorized {
					triggers {
						notAuthorized: PSD_Authorization.DT_PSD_Authorization_Not_Authorize[psdAuthorizationState]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_WCU_PositionReport]
					duration 1
				},
				Contract forwardAuthorized {
					triggers {
						authorized: PSD_Authorization.DT_PSD_Authorization_Authorize[psdAuthorizationState]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_WCU_PositionReport]
					duration 1
				}
			}
		},
		CType OBCU_ATP_Propulson_Function {
			InputPorts {
				InputPort doorStatus (Type: DoorStatus.DoorStatus),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort rauz (Type: Status.INT),
				InputPort authorizePSDOpening (Type: Bool.BOOLEAN)
			}
			OutputPorts {
				OutputPort propulsion (Type: Bool.BOOLEAN)
			}
		},
		CType OBCU_ATP_Door_Release_Controller
		 {
			InputPorts {
				InputPort doorStatus (Type: DoorStatus.DoorStatus),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort trainOperationMode (Type: Status.INT),
				InputPort platformPSDStatus (Type: PlatformPSDStatus.PlatformPSDStatus),
				InputPort cabPremissiveDoorButton (Type: Bool.BOOLEAN),
				InputPort berthed (Type: Status.INT),
				InputPort stoppingWindowMinus (Type: Int.INT),
				InputPort stoppingPoint (Type: Int.INT),
				InputPort stopingWindowPlus (Type: Int.INT),
				InputPort trainPosition (Type: Int.INT),
				InputPort movingStatus (Type: MovingStatus.MovingStatus),
				InputPort platformSide (Type: DoorOpenStrategy.DoorOpenStrategy)
			}
			OutputPorts {
				OutputPort doorReleaseCommand (Type: DoorReleaseCommand.DoorReleaseCommand),
				OutputPort doorReleaseStatus (Type: DoorReleaseStatus.DoorReleaseStatus),
				OutputPort releaseForcedByPermissiveDoorButton (Type: Bool.BOOLEAN)
			}
			Contracts {
				Contract openingRightDoorSide {
					triggers {
						trigger1: DoorOpenStrategy.DT_DoorOpenStrategy_Right[platformSide]
					}
					guarantee 
						DoorReleaseCommand.DT_DoorReleaseCommand_Right[doorReleaseCommand]
					duration 1
				},
				Contract doorsNotReleasedWhileMoving {
					triggers {
						moving: MovingStatus.DT_TrainMovingStatus_Moving[movingStatus]
					}
					guarantee 
						DoorReleaseStatus.DT_DoorReleaseStatus_Locked[doorReleaseStatus] /\
						DoorReleaseCommand.DT_DoorReleaseCommand_Deactivate[doorReleaseCommand]
					duration 1
				},
				Contract doorsClosedWhenClosedIndication {
					triggers {
						closedIndication: DoorStatus.DT_DoorStatus_Closed[doorStatus]
					}
					guarantee 
						DoorReleaseStatus.DT_DoorReleaseStatus_Locked[doorReleaseStatus] /\
						DoorReleaseCommand.DT_DoorReleaseCommand_Deactivate[doorReleaseCommand]
					duration 1
				},
				Contract doorsReleasedIfStandstillAndInStoppingWindow {
					triggers {
						standstill: MovingStatus.DT_TrainMovingStatus_StandStill[movingStatus],
						hasPSD: PlatformPSDStatus.DT_PlatformPSDStatus_Has_PSD[platformPSDStatus] at 1,
						inStopingPosition: Bool.true[Comparison.ls[Int.sub[stoppingPoint, stoppingWindowMinus], trainPosition]] /\
								Bool.true[Comparison.gt[Int.sub[stoppingPoint, stopingWindowPlus], trainPosition]] at 2
					}
					guarantee 
						DoorReleaseStatus.DT_DoorReleaseStatus_Released[doorReleaseStatus]
					duration 3
				},
				Contract doorsReleasedIfStandstillAndInStoppingWindow2 {
					triggers {
						standstill: MovingStatus.DT_TrainMovingStatus_StandStill[movingStatus],
						hasPSD: PlatformPSDStatus.DT_PlatformPSDStatus_Has_PSD[platformPSDStatus] at 1,
						inStopingPosition: Bool.true[Comparison.ls[Int.sub[stoppingPoint, stoppingWindowMinus], trainPosition]] /\
								Bool.true[Comparison.gt[Int.sub[stoppingPoint, stopingWindowPlus], trainPosition]] at 2
					}
					guarantee 
						Bool.true[Wayside_Out_Converter.PSD_O_PSD_Open] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Close] /\
						DoorReleaseCommand.DT_DoorReleaseCommand_Right[OBCU_ATP_Door_Release_Controller.doorReleaseCommand]
					duration 3
				}
			}
		},
		/*
		 * Wayside Components
		 */
		CType Wayside_In_Converter {
			InputPorts {
				InputPort PSD_I_PSD_Overwrite (Type: Bool.BOOLEAN),
				InputPort PSD_I_PSD_Closed (Type: Bool.BOOLEAN),
				InputPort ATS_I_Select_Door_Open_Strategy (Type: Status.INT)
			}
			OutputPorts {
				OutputPort selectedDoorStrategy (Type: DoorOpenStrategy.DoorOpenStrategy),
				OutputPort psdClosed (Type: DoorStatus.DoorStatus),
				OutputPort psdOverwrite (Type: Status.INT)
			}
		},
		CType Wayside_OPD_Telegram_Extractor {
			InputPorts {
				InputPort OBCU_WCU_PlatformDoor (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort psdOpenCommand (Type: DoorCommand.DoorCommand)
			}
			Contracts {
				Contract forwardCloseCommand {
					triggers {
						closeCommand: DoorCommand.DT_DoorCommand_Close[OBCU_WCU_PlatformDoor]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Close[psdOpenCommand]
					duration 1
				},
				Contract forwardOpenCommand {
					triggers {
						openCommand: DoorCommand.DT_DoorCommand_Open[OBCU_WCU_PlatformDoor]
					}
					guarantee 
						DoorCommand.DT_DoorCommand_Open[psdOpenCommand]
					duration 1
				}
			}
		},
		CType Wayside_OPR_Telegram_Extractor {
			InputPorts {
				InputPort OBCU_WCU_PositionReport (Type: PSD_Authorization.PSD_Authorization)
			}
			OutputPorts {
				OutputPort doorOpenAuthorization (Type: PSD_Authorization.PSD_Authorization)
			}
			Contracts {
				Contract forwardNotAuthorized {
					triggers {
						notAuthorized: PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_WCU_PositionReport]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[doorOpenAuthorization]
					duration 1
				},
				Contract forwardAuthorized {
					triggers {
						authorized: PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_WCU_PositionReport]
					}
					guarantee 
						PSD_Authorization.DT_PSD_Authorization_Authorize[doorOpenAuthorization]
					duration 1
				}
			}
		},
		CType Wayside_PSD_Control_Function {
			InputPorts {
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort doorOpenAuthorization (Type: PSD_Authorization.PSD_Authorization),
				InputPort psdOpenCommand (Type: DoorCommand.DoorCommand)
			}
			OutputPorts {
				OutputPort psdOpen (Type: Bool.BOOLEAN)
			}
			Contracts {
				Contract doorOpen {
					triggers {
						authorized: PSD_Authorization.DT_PSD_Authorization_Authorize[doorOpenAuthorization],
						psdOpenCommand: DoorCommand.DT_DoorCommand_Open[psdOpenCommand] at 1,
						trainControlLevelITC: TrainControlLevel.DT_TrainControlLevel_ITC[trainControlLevel] at 2
					}
					guarantee 
						Bool.true[psdOpen]
					duration 3
				},
				Contract doorClosed {
					triggers {
						notAuthorized: PSD_Authorization.DT_PSD_Authorization_Not_Authorize[doorOpenAuthorization],
						psdCloseCommand: DoorCommand.DT_DoorCommand_Close[psdOpenCommand] at 2
					}
					guarantee 
						Bool.false[psdOpen]
					duration 3
				}
			}
		},
		CType Wayside_RAUZ_Control_Function {
			InputPorts {
				InputPort psdOverwrite (Type: Status.INT),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel),
				InputPort psdClosed (Type: Bool.BOOLEAN)
			}
			OutputPorts {
				OutputPort rauz (Type: Status.INT),
				OutputPort zoneBlockedATS (Type: Bool.BOOLEAN)
			}
		},
		CType Wayside_Door_Strategy_Function {
			InputPorts {
				InputPort selectedDoorStrategy (Type: DoorOpenStrategy.DoorOpenStrategy),
				InputPort defaultDoorStrategy (Type: DoorOpenStrategy.DoorOpenStrategy),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel)
			}
			OutputPorts {
				OutputPort currentDoorStrategy (Type: DoorOpenStrategy.DoorOpenStrategy)
			}
		},
		CType Wayside_ATS_Status_Function{
			InputPorts {
				InputPort currentDoorStrategy (Type: DoorOpenStrategy.DoorOpenStrategy),
				InputPort trainControlLevel (Type: TrainControlLevel.TrainControlLevel)
			}
			OutputPorts {
				OutputPort psdStatusATS (Type: Status.INT),
				OutputPort psdAuthorizationATS (Type: Authority.STRING),
				OutputPort psdRequestATS (Type: Status.INT),
				OutputPort doorStrategyStatusToATS (Type: Status.INT)
			}
		},
		CType Wayside_PSD_Door_Command_State_Tracker {
			InputPorts {
				InputPort rauz (Type: Status.INT)
			}
			OutputPorts {
				OutputPort rauzState (Type: Status.INT)
			}
		},
		CType Wayside_TelegramBuilder {
			InputPorts {
				InputPort rausState (Type: Status.INT)
			}
			OutputPorts {
				OutputPort WCU_OBCU_MovementAuthority (Type: Authority.STRING)
			}
		},
		CType Wayside_Out_Converter {
			InputPorts {
				InputPort psdOpen (Type: Bool.BOOLEAN),
				InputPort psdStatusATS (Type: Status.INT),
				InputPort psdAuthorizationATS (Type: Authority.STRING),
				InputPort psdRequestATS (Type: Status.INT),
				InputPort doorStrategyStatusToATS (Type: Status.INT)
			}
			OutputPorts {
				OutputPort PSD_O_PSD_Close (Type: Bool.BOOLEAN),
				OutputPort PSD_O_PSD_Open (Type: Bool.BOOLEAN),
				OutputPort ATS_O_PSD_Authorization (Type: Authority.STRING),
				OutputPort ATS_O_PSD_Status (Type: Status.INT),
				OutputPort ATS_O_PSD_Request (Type: Status.INT),
				OutputPort ATS_O_Door_Strategy (Type: Status.INT)
			}
			Contracts {
				Contract psdOpen {
					triggers {
						open: Bool.true[psdOpen]
					}
					guarantee 
						Bool.true[PSD_O_PSD_Open] /\ Bool.false[PSD_O_PSD_Close]
					duration 1
				},
				Contract psdClose {
					triggers {
						open: Bool.false[psdOpen]
					}
					guarantee 
						Bool.false[PSD_O_PSD_Open] /\ Bool.true[PSD_O_PSD_Close]
					duration 1
				}
			}
		}
	}
	Connections {
		DoorReleaseStatus_PAC_DRC: (OBCU_ATP_PSD_Authorization_Controller.doorReleaseStatus, OBCU_ATP_Door_Release_Controller.doorReleaseStatus),
		DoorReleaseStatus_ODC_DRC: (OBCU_ATO_Door_Open_Controller.doorReleaseStatus, OBCU_ATP_Door_Release_Controller.doorReleaseStatus),
		DoorCommand_PDC_DOC: (OBCU_ATO_PSD_Door_Controller.openDoorCommand, OBCU_ATO_Door_Open_Controller.doorOpenCommand),
		DoorCommand_PAC_DRC: (OBCU_ATP_PSD_Authorization_Controller.doorReleaseCommand, OBCU_ATP_Door_Release_Controller.doorReleaseCommand),
		DoorCommand_DCS_PDC: (OBCU_ATO_PSD_Door_Command_State.openDoorCommand, OBCU_ATO_PSD_Door_Controller.psdDoorCommand),
		DoorCommand_TB_PDC: (OBCU_ATO_Telegram_Builder.psdDoorCommandState, OBCU_ATO_PSD_Door_Command_State.psdDoorCommandState),
		DoorCommand_FPD_TB: (OBCU_ITF_FWD_Platform_Door.WCU_OBCU_PlatformDoor, OBCU_ATO_Telegram_Builder.OBCU_WCU_PlatformDoor),
		DoorCommand_TX_FPD: (Wayside_OPD_Telegram_Extractor.OBCU_WCU_PlatformDoor, OBCU_ITF_FWD_Platform_Door.WCU_OBCU_PlatformDoor_Out),
		DoorAuthorization_PCF_OTE: (Wayside_PSD_Control_Function.doorOpenAuthorization, Wayside_OPR_Telegram_Extractor.doorOpenAuthorization),
		DoorCommandWayside_PCF_OTE: (Wayside_PSD_Control_Function.psdOpenCommand, Wayside_OPD_Telegram_Extractor.psdOpenCommand),
		PSDWayside_OC_PCF: (Wayside_Out_Converter.psdOpen, Wayside_PSD_Control_Function.psdOpen),
		DoorStatus_DRC_IC: (OBCU_ATP_Door_Release_Controller.doorStatus, OBCU_ATP_In_Converter.doorStatus),
		AuthorizeOpening_PAST_PAC: (OBCU_ATP_PSD_Authorization_State_Tracker.authorizePSDOpening, OBCU_ATP_PSD_Authorization_Controller.authorizePSDOpening),
		AuthorizeOpening_TB_PAST: (OBCU_ATP_Telegram_Builder.psdAuthorizationState, OBCU_ATP_PSD_Authorization_State_Tracker.psdAuthorizationState),
		PositionReport_FPR_TB: (OBCU_ITF_FWD_Position_Report.WCU_OBCU_PositionReport, OBCU_ATP_Telegram_Builder.OBCU_WCU_PositionReport),
		PositionReport_TE_FPR: (Wayside_OPR_Telegram_Extractor.OBCU_WCU_PositionReport, OBCU_ITF_FWD_Position_Report.WCU_OBCU_PositionReport_Out)
	}

	Contracts {
		// 1) If the train is moving, the PSDs are closed.
		Contract PSDAreClosedWhenTrainIsMoving {
			triggers {
				trigger1: MovingStatus.DT_TrainMovingStatus_Moving[OBCU_ATP_Door_Release_Controller.movingStatus],
				controlLevelCTC: TrainControlLevel.DT_TrainControlLevel_CTC[OBCU_ATO_PSD_Door_Controller.trainControlLevel] at 3
			}
			guarantee 
				Bool.true[Wayside_Out_Converter.PSD_O_PSD_Close] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Open]
			duration 10
			proof {
				step1:
					at 1
					have
						DoorReleaseCommand.DT_DoorReleaseCommand_Deactivate[OBCU_ATP_Door_Release_Controller.doorReleaseCommand] /\
						DoorReleaseStatus.DT_DoorReleaseStatus_Locked[OBCU_ATP_Door_Release_Controller.doorReleaseStatus]
					from [
						trigger1
					]
					using
						OBCU_ATP_Door_Release_Controller.doorsNotReleasedWhileMoving,
				step2:
					at 2
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_PSD_Authorization_Controller.authorizePSDOpening]
					by "simp"
					from [
						step1 with [
							DoorReleaseStatus_PAC_DRC,
							DoorCommand_PAC_DRC
						]
					]
					using
						OBCU_ATP_PSD_Authorization_Controller.notAuthorized,
				step3:
					at 3
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_PSD_Authorization_State_Tracker.psdAuthorizationState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step2 with [
							AuthorizeOpening_PAST_PAC
						]
					] 
					using
						OBCU_ATP_PSD_Authorization_State_Tracker.forwardNotAuthorized,
				step4:
					at 4
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_Telegram_Builder.OBCU_WCU_PositionReport]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step3 with [
							AuthorizeOpening_TB_PAST
						]
					]
					using 
						OBCU_ATP_Telegram_Builder.forwardNotAuthorized,		
				step5:
					at 2
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_Door_Open_Controller.doorOpenCommand]
					by "simp"	
					from [
						step1 with [
							DoorReleaseStatus_ODC_DRC
						]
					]
					using
						OBCU_ATO_Door_Open_Controller.doorsClosed,
				step6:
					at 4
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_PSD_Door_Controller.psdDoorCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step5 with [
							DoorCommand_PDC_DOC
						],
						controlLevelCTC
					]
					using
						OBCU_ATO_PSD_Door_Controller.forwardClosedDoorCommand,
				step7:
					at 5
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_PSD_Door_Command_State.psdDoorCommandState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step6 with [
							DoorCommand_DCS_PDC
						]
					]
					using
						OBCU_ATO_PSD_Door_Command_State.forwardingCloseCommand,
				step8:
					at 6
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_Telegram_Builder.OBCU_WCU_PlatformDoor]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step7 with [
							DoorCommand_TB_PDC
						]
					]
					using
						OBCU_ATO_Telegram_Builder.forwardingCloseCommand,
				step9:
					at 7
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ITF_FWD_Platform_Door.WCU_OBCU_PlatformDoor_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step8 with [
							DoorCommand_FPD_TB
						]
					]
					using
						OBCU_ITF_FWD_Platform_Door.forwardingCloseCommand,
				step10:
					at 5
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ITF_FWD_Position_Report.WCU_OBCU_PositionReport_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step4 with [
							PositionReport_FPR_TB
						]
					]
					using
						OBCU_ITF_FWD_Position_Report.forwardNotAuthorized,
				step11:
					at 6
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[Wayside_OPR_Telegram_Extractor.doorOpenAuthorization]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step10 with [
							PositionReport_TE_FPR
						]
					]
					using
						Wayside_OPR_Telegram_Extractor.forwardNotAuthorized,
				step12:
					at 8
					have
						DoorCommand.DT_DoorCommand_Close[Wayside_OPD_Telegram_Extractor.psdOpenCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step9 with [
							DoorCommand_TX_FPD
						] 
					]
					using
						Wayside_OPD_Telegram_Extractor.forwardCloseCommand,
				step13:
					at 9
					have
						Bool.false[Wayside_PSD_Control_Function.psdOpen]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step11 with [
							DoorAuthorization_PCF_OTE
						],
						step12 with [
							DoorCommandWayside_PCF_OTE
						]
					]
					using
						Wayside_PSD_Control_Function.doorClosed,
				step14:
					at 10
					have
						Bool.true[Wayside_Out_Converter.PSD_O_PSD_Close] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Open]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step13 with [
							PSDWayside_OC_PCF	
						]
					]
					using
						Wayside_Out_Converter.psdClose
			}
		},
		
		// 2) If the train is at standstill and the position of the train doors match the position of the PSDs, then, the PSDs are opened.
		Contract PSDAreOpenIfNotMovingAndMatchingPosition {
			triggers {	
				standstill: MovingStatus.DT_TrainMovingStatus_StandStill[OBCU_ATP_Door_Release_Controller.movingStatus],
				hasPSD: PlatformPSDStatus.DT_PlatformPSDStatus_Has_PSD[OBCU_ATP_Door_Release_Controller.platformPSDStatus] at 1,
				inStopingPosition: Bool.true[Comparison.ls[Int.sub[OBCU_ATP_Door_Release_Controller.stoppingPoint, OBCU_ATP_Door_Release_Controller.stoppingWindowMinus], OBCU_ATP_Door_Release_Controller.trainPosition]] /\
						Bool.true[Comparison.gt[Int.sub[OBCU_ATP_Door_Release_Controller.stoppingPoint, OBCU_ATP_Door_Release_Controller.stopingWindowPlus], OBCU_ATP_Door_Release_Controller.trainPosition]] at 2,
				trainControlLevelITC: TrainControlLevel.DT_TrainControlLevel_ITC[Wayside_PSD_Control_Function.trainControlLevel] at 10		
			}
			guarantee 
				Bool.true[Wayside_Out_Converter.PSD_O_PSD_Open] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Close]
			duration 12
			proof {
				step1:
					at 3
					have
						DoorReleaseStatus.DT_DoorReleaseStatus_Released[OBCU_ATP_Door_Release_Controller.doorReleaseStatus] 
					from [
						standstill, hasPSD, inStopingPosition
					]
					using
						OBCU_ATP_Door_Release_Controller.doorsReleasedIfStandstillAndInStoppingWindow,
				step2:
					at 4
					have
						PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_ATP_PSD_Authorization_Controller.authorizePSDOpening]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step1 with [
							DoorReleaseStatus_PAC_DRC
						]
					]
					using
						OBCU_ATP_PSD_Authorization_Controller.authorized,
				step3:
					at 5
					have
						PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_ATP_PSD_Authorization_State_Tracker.psdAuthorizationState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step2 with [
							AuthorizeOpening_PAST_PAC
						]
					]
					using
						OBCU_ATP_PSD_Authorization_State_Tracker.forwardAuthorized,
				step4:
					at 6
					have
						PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_ATP_Telegram_Builder.OBCU_WCU_PositionReport]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step3 with [
							AuthorizeOpening_TB_PAST
						]
					]
					using
						OBCU_ATP_Telegram_Builder.forwardAuthorized,
				step5:
					at 4
					have
						DoorCommand.DT_DoorCommand_Open[OBCU_ATO_Door_Open_Controller.doorOpenCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step1 with [
							DoorReleaseStatus_ODC_DRC
						]
					]
					using
						OBCU_ATO_Door_Open_Controller.doorsOpened,
				step6:
					at 5
					have
						DoorCommand.DT_DoorCommand_Open[OBCU_ATO_PSD_Door_Controller.psdDoorCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step5 with [
							DoorCommand_PDC_DOC
						]
					]
					using
						OBCU_ATO_PSD_Door_Controller.forwardOpemDoorCommand,
				step7:
					at 6
					have
						DoorCommand.DT_DoorCommand_Open[OBCU_ATO_PSD_Door_Command_State.psdDoorCommandState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step6 with [
							DoorCommand_DCS_PDC
						]
					]
					using
						OBCU_ATO_PSD_Door_Command_State.forwardingOpenCommand,
				step8:
					at 7
					have
						DoorCommand.DT_DoorCommand_Open[OBCU_ATO_Telegram_Builder.OBCU_WCU_PlatformDoor]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step7 with [
							DoorCommand_TB_PDC
						]
					]
					using
						OBCU_ATO_Telegram_Builder.forwardingOpenCommand,
				step9:
					at 8
					have
						DoorCommand.DT_DoorCommand_Open[OBCU_ITF_FWD_Platform_Door.WCU_OBCU_PlatformDoor_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step8 with [
							DoorCommand_FPD_TB
						]
					]
					using
						OBCU_ITF_FWD_Platform_Door.forwardingOpenCommand,
				step10:
					at 7
					have
						PSD_Authorization.DT_PSD_Authorization_Authorize[OBCU_ITF_FWD_Position_Report.WCU_OBCU_PositionReport_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step4 with [
							PositionReport_FPR_TB
						]
					]
					using
						OBCU_ITF_FWD_Position_Report.forwardAuthorized,
				step11:
					at 8
					have
						PSD_Authorization.DT_PSD_Authorization_Authorize[Wayside_OPR_Telegram_Extractor.doorOpenAuthorization]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step10 with [
							PositionReport_TE_FPR
						]
					]
					using
						Wayside_OPR_Telegram_Extractor.forwardAuthorized,
				step12:
					at 9
					have
						DoorCommand.DT_DoorCommand_Open[Wayside_OPD_Telegram_Extractor.psdOpenCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step9 with [
							DoorCommand_TX_FPD
						]
					]
					using
						Wayside_OPD_Telegram_Extractor.forwardOpenCommand,
				step13:
					at 11
					have
						Bool.true[Wayside_PSD_Control_Function.psdOpen]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step11 with [
							DoorAuthorization_PCF_OTE
						],
						step12 with [
							DoorCommandWayside_PCF_OTE
						],
						trainControlLevelITC
					]
					using
						Wayside_PSD_Control_Function.doorOpen,
				step14:
					at 12
					have
						Bool.true[Wayside_Out_Converter.PSD_O_PSD_Open] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Close]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step13 with [
							PSDWayside_OC_PCF
						]
					]
					using
						Wayside_Out_Converter.psdOpen

			}
		},
		
		// 3) If the train doors open on the right hand side, the platform must be on the right hand
		Contract trainOpensTheDoorOnTheRightSide {
			triggers {
				openRightDoorStrategy: DoorOpenStrategy.DT_DoorOpenStrategy_Right[OBCU_ATP_Door_Release_Controller.platformSide]
			}
			guarantee 
				DoorReleaseCommand.DT_DoorReleaseCommand_Right[OBCU_ATP_Door_Release_Controller.doorReleaseCommand]
			duration 1
			proof {
				step1:
					at 1
					have
						DoorReleaseCommand.DT_DoorReleaseCommand_Right[OBCU_ATP_Door_Release_Controller.doorReleaseCommand]
					from [
						openRightDoorStrategy
					]
					using
						OBCU_ATP_Door_Release_Controller.openingRightDoorSide
			}
		},
		// 4) If permissive release and the train is at standstill then both doors are open
		Contract trainOpensTheDoorOnBothSides {
			triggers {
				standstill: MovingStatus.DT_TrainMovingStatus_StandStill[OBCU_ATP_Door_Release_Controller.movingStatus],
				hasPSD: PlatformPSDStatus.DT_PlatformPSDStatus_Has_PSD[OBCU_ATP_Door_Release_Controller.platformPSDStatus] at 1,
				inStopingPosition: Bool.true[Comparison.ls[Int.sub[OBCU_ATP_Door_Release_Controller.stoppingPoint, OBCU_ATP_Door_Release_Controller.stoppingWindowMinus], OBCU_ATP_Door_Release_Controller.trainPosition]] /\
								Bool.true[Comparison.gt[Int.sub[OBCU_ATP_Door_Release_Controller.stoppingPoint, OBCU_ATP_Door_Release_Controller.stopingWindowPlus], OBCU_ATP_Door_Release_Controller.trainPosition]] at 2
			}
			guarantee 
				Bool.true[Wayside_Out_Converter.PSD_O_PSD_Open] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Close] /\
				DoorReleaseCommand.DT_DoorReleaseCommand_Right[OBCU_ATP_Door_Release_Controller.doorReleaseCommand]
			duration 3
			proof {
				step1:
					at 3
					have
						Bool.true[Wayside_Out_Converter.PSD_O_PSD_Open] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Close] /\
						DoorReleaseCommand.DT_DoorReleaseCommand_Right[OBCU_ATP_Door_Release_Controller.doorReleaseCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						standstill, hasPSD, inStopingPosition
					]
					using
						OBCU_ATP_Door_Release_Controller.doorsReleasedIfStandstillAndInStoppingWindow2
			}
		},
		// 5) When the train indicates that the doors are closed, PSDs are closed
		Contract PSDAreClosedWhenTrainGivesClosedIndication {
			triggers {
				trigger1: DoorStatus.DT_DoorStatus_DoorsVitalClosed[OBCU_ATP_In_Converter.TCL_I_Door_Closed_Indication],
				controlLevelCTC: TrainControlLevel.DT_TrainControlLevel_CTC[OBCU_ATO_PSD_Door_Controller.trainControlLevel] at 4
			}
			guarantee 
				Bool.true[Wayside_Out_Converter.PSD_O_PSD_Close] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Open]
			duration 11
			proof {
				step1:
					at 1
					have
						DoorStatus.DT_DoorStatus_Closed[OBCU_ATP_In_Converter.doorStatus]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						trigger1
					]
					using
						OBCU_ATP_In_Converter.forwardDoorClosedIndication,
				step2:
					at 2
					have
						DoorReleaseCommand.DT_DoorReleaseCommand_Deactivate[OBCU_ATP_Door_Release_Controller.doorReleaseCommand] /\
						DoorReleaseStatus.DT_DoorReleaseStatus_Locked[OBCU_ATP_Door_Release_Controller.doorReleaseStatus]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step1 with [
							DoorStatus_DRC_IC	
						]
					]
					using
						OBCU_ATP_Door_Release_Controller.doorsClosedWhenClosedIndication,
				step3:
					at 3
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_PSD_Authorization_Controller.authorizePSDOpening]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step2 with [
							DoorReleaseStatus_PAC_DRC, DoorCommand_PAC_DRC
						]
					]
					using
						OBCU_ATP_PSD_Authorization_Controller.notAuthorized,
				step4:
					at 4
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_PSD_Authorization_State_Tracker.psdAuthorizationState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step3 with [
							AuthorizeOpening_PAST_PAC
						]
					]
					using
						OBCU_ATP_PSD_Authorization_State_Tracker.forwardNotAuthorized,
				step5:
					at 5
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ATP_Telegram_Builder.OBCU_WCU_PositionReport]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step4 with [
							AuthorizeOpening_TB_PAST
						]
					]
					using
						OBCU_ATP_Telegram_Builder.forwardNotAuthorized,
				step6:
					at 3
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_Door_Open_Controller.doorOpenCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step2 with [
							DoorReleaseStatus_ODC_DRC
						]
					]
					using
						OBCU_ATO_Door_Open_Controller.doorsClosed,
				step7:
					at 5
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_PSD_Door_Controller.psdDoorCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step6 with [
							DoorCommand_PDC_DOC
						],
						controlLevelCTC
					]
					using
						OBCU_ATO_PSD_Door_Controller.forwardClosedDoorCommand,
				step8:
					at 6
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_PSD_Door_Command_State.psdDoorCommandState]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step7 with [
							DoorCommand_DCS_PDC
						]
					]
					using 
						OBCU_ATO_PSD_Door_Command_State.forwardingCloseCommand,
				step9:
					at 7
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ATO_Telegram_Builder.OBCU_WCU_PlatformDoor]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step8 with [
							DoorCommand_TB_PDC
						]
					]
					using
						OBCU_ATO_Telegram_Builder.forwardingCloseCommand,
				step10:
					at 8
					have
						DoorCommand.DT_DoorCommand_Close[OBCU_ITF_FWD_Platform_Door.WCU_OBCU_PlatformDoor_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step9 with [
							DoorCommand_FPD_TB
						]
					]
					using
						OBCU_ITF_FWD_Platform_Door.forwardingCloseCommand,
				step11:
					at 6
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[OBCU_ITF_FWD_Position_Report.WCU_OBCU_PositionReport_Out]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step5 with [
							PositionReport_FPR_TB
						]
					]
					using
						OBCU_ITF_FWD_Position_Report.forwardNotAuthorized,
				step12:
					at 7
					have
						PSD_Authorization.DT_PSD_Authorization_Not_Authorize[Wayside_OPR_Telegram_Extractor.doorOpenAuthorization]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step11 with [
							PositionReport_TE_FPR
						]
					]
					using
						Wayside_OPR_Telegram_Extractor.forwardNotAuthorized,
				step13:
					at 9
					have
						DoorCommand.DT_DoorCommand_Close[Wayside_OPD_Telegram_Extractor.psdOpenCommand]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step10 with [
							DoorCommand_TX_FPD
						]
					]
					using
						Wayside_OPD_Telegram_Extractor.forwardCloseCommand,
				step14:
					at 10
					have
						Bool.false[Wayside_PSD_Control_Function.psdOpen]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step12 with [
							DoorAuthorization_PCF_OTE
						],
						step13 with [
							DoorCommandWayside_PCF_OTE
						]
					]
					using
						Wayside_PSD_Control_Function.doorClosed,
				step15:
					at 11
					have
						Bool.true[Wayside_Out_Converter.PSD_O_PSD_Close] /\ Bool.false[Wayside_Out_Converter.PSD_O_PSD_Open]
					by "(simp add: numeral_Bit0 numeral_Bit1)"
					from [
						step14 with [
							PSDWayside_OC_PCF
						]
					]
					using
						Wayside_Out_Converter.psdClose
			}
		}
	}
}